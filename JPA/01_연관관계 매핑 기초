# 연관관계 매핑 기초
---
1. JPA는 모두 트랜잭션 안에서 실행되어야한다.  

2. @Entity
	- 기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)
	- final, enum, interface, inner 클래스 사용 x
	- 저장할 필드에 final 사용 x  
	
    <br>
3. @ManyToOne (다대일) --> 이곳이 다대일 관계 에서 "다"이다.
	- 다대일 객체에서는 @ManyToOne과 @JoinColumn(name = "컬럼명") 을 써줘야 한다.
	- 객체를 받아온다
	
	ex) Member 와 Team 이라는 객체가 있을때 둘은 다대일 관계라고 하면
		Member 객체 안에서는

		@ManyToOne
		@JoinColumn(name = "TEAM_ID")
		private Team team;


4. @OneToMany (일대다) --> 이곳이 다대일 관계 에서 "일"이다.
	- 그럼 일대다에서는 어떻게 받아오는가
	- 위에 Member 객체에서 선언한 변수명으로 mappedBy 에 걸어준다.(컬럼명으로 거는거 아니다.)
	- new ArrayList는 관례로 초기화해준다.

	ex) 일대다 Team 안에서는


		@OneToMany(mappedBy = "team")
		List<Member> members = new ArrayList<Member>();


5. 연관관계의 주인
	- 양방향 연관관계에서는 둘 중 하나만 외래키를 관리해야 한다.
	(둘다 등록하고 수정할 수 있게 하면 안됨)
	- 외래키로 사용하는곳이 주인이다.(다대일 관계에서 "다"가 주인) --> 위에서는 Member 클래스 안에 있는 객체가 주인
	- @JoinColumn 사용한곳이 주인이다.(등록, 수정 가능) (DB 업데이트 가능)
	- @ManyToOne 이 주인
	- mappedBy 는 연관관계 주인한테 사용 x
	고로 mappedBy 가 사용된것은 읽기만 가능하다.(조회만 가능, 값 넣어도 JPA가 등록, 수정 하지 않는다)
	- "다" 쪽이 항상 주인이다.
	- 이쪽이 기준!
	- 주인한테만 값을 입력하면 DB에 전송되지만 순수한 객체 관계를 고려하면 항상 양쪽 다 값을 입력해야 한다.(테스트 케이스 고려)
	ex) team.getMembers().add(member);
	- 근데 위에 코드는 까먹을 가능성이 많으니 Member 클래스에서 setTeam 안에 코드를 넣어주는게 좋다. (연관관계 편의 메소드)
	<br>

    <br>
	ex 1) Member(주인) 쪽에서 코드를 넣는다면

		public void setTeam(Team team){
		this.team = team;
		team.getMembers().add(this);}
	
	ex 2) Team 쪽에서 코드를 넣는다면
    
		public void addMember(Member member){
		member.setTeam(this);
		members.add(member);
		}
		
	ex) 1이나 2 둘 중 하나만 사용
